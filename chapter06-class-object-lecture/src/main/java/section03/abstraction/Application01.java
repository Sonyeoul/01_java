package main.java.section03.abstraction;

import java.util.Scanner;

public class Application01 {

    public static void main(String[] args) {
        //객체지향 프로그래밍
    /*
    * 객체지향 프로그래밍이란?
    * 현실세계에 모든 사건은 객체와 객체의 상호작용에 의해 일어난다
    * 사용자정의가 가능하다
    * 하나의 객체가 너무많은 역할을 수행하는게 아니라
    * 하나의 객체당 적절한 역할을 수행해야한다
    *
    * 객체를 설계하기 위해서는 복잡한 현실세계를 그대로 반영하기에는
    * 너무 방대하고 복잡하기 때문에 현실 세계를 프로그램의 목적에 맞게
    * 단순화하는 추상화 라는 기법을 적용하게된다
    *
    * 추상화란?
    * 공통된 부분을 추출하고 고통되지 않은 부분을 제거한다는 의미를 가지고
    * 추상화의 목적은 유연성을 확보하기 위함이다.
    * 즉, 재사용성이 높아질 수 있게 한다는 의미이다.
    * 객체의 재사용성이 증가하면 중복 작성되는 코드를 줄일 수 있으며
    * 오류 발생 가능성을 감소시키고 유지보수성을 증가시킨다.
    *
    *
    * */

        /*
        * 객체와 객체의 상호작용
        * 객체와 객체는 메세지를 통해 서로 상호작용함
        * 메세지를 보내는 쪽을 송신자 라고하고
        * 메세지를 받는쪽을 수신자 라고한다
        * 수신자는 메세지를 전달 받아 그 메세지에 해당하는 내용을 처리하는
        * 방법을 스스로 결정하고 그 결정한 방법 대로 처리할 명령어들을
        * 순차적으로 기술한 것을 메소드라고한다
        * 상호작용에 중요한 것은 메세지를 송수신하고 그 방법을 기술하여 메세지에 응답하는 상호작용을 설꼐
        * 따라서 객체를 설계할 대는 속성을 부가적이며 적잘한 책임을 가진 객체들간의
        * 주고받는 메세지를 이용해 상호작용 하는것을 설계하는 것을 의미한다
        * 즉 . 필드보다는 메소드를 중점으로 추상화 기법을 적용하여 객체를 설계하고
        * 그 객체를 구현하는 방법으로 설계한 대로 클래스를 작성하는것이다
        * */

        /*
        * 카레이서는 시동걸기, 엑셀발기, 브레이크 밝기, 시돟끄기
        * 자동차는 시동걸기, 앞으로가기 ,멈추기. 시동끄기
        * 자동차는 처음에 멈춘 상태에서 대기함
        * 카레이서는 먼저 자동차에 시동을 건다 이미 결려있는경우는 다시 걸수없다
        * 카레이서가 엑셀을 밟으면 시동이 걸린 상태일때 10km 씩 증가하며 앞으로 나간다
        * 자동차가 달리는 중인 경우 브레이크를 밟으면 자동차의 시속은 0으로 떨어지며 멈춘다
        * 브레이크를 밟을때 자동차가 달리는 중이 아니라면 이미 멈춰있는 상태라고 안내
        * 카레이서가 시동끄면 더 이상 자동차는 움직이지않음
        * 자동차가 달리는 중이라면 시동을 끌수 없음
        *
        */
        //recer클래스 : 자동차, (시동걸기 ,엑셀 브레이크 ,시동끄기
        //car 클래스 : 시동 상태 , 현재속도 (시동걸기,앞으로가기.멈추기,시동끄기)


        Motion racer = new Motion();
        Scanner scr = new Scanner(System.in);


        while(true){
            System.out.println("-----카레이싱 프로그램------");
            System.out.println("1. 시동걸기");
            System.out.println("2. 전진");
            System.out.println("3. 정지");
            System.out.println("4. 시동끄기");
            System.out.println("9. 프로그램 종료");
            System.out.println("메뉴 선택 : ");
            int num = scr.nextInt();

            switch(num) {
                case 1:
                    racer.startUp();
                    break;
                case 2:
                    racer.stepAccelation();
                    break;
                case 3:
                    racer.stopBreak();
                    break;
                case 4:
                    racer.turnOff();
                    break;
                case 9:
                    System.out.println("프로그램 종료합니다");
                    break;
                default:
                    break;
            }
        }
    }
}
