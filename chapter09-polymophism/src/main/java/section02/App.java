package main.java.section02;

public class App {
    public static void main(String[] args) {

        /*
        * 추상 클래스와 추상 메소드
        * 추상 메소드를 0개 이상 포함하는 클래스를 추상 클래스다
        * 추상 클래스는 선언부터에 abstract 키워드를 명시해야함
        * 추상클래스는 인스턴스 생성할 수 없다.
        * 추상 클래스를 사용 하려면 추상 클래스를 상속받은 하위 클래스에서 인스턴스 생성해야함
        * 이 때 추상 클래스는 상위 타입으로 사용될 수있으며 다형성을 이용 할 수있다
        *
        * 추상클래스에 작성한 메소드는 반드시 오버라이딩해서 작성해야 하며
        * 후손 클래스들의 메소드를의 공용 인터페이스 역핧을 수행가능
        * 추상 클래스에 작성한 메스도를 호출하게 되면 실제 후손 타입의
        * 인스턴스가 가지는 메소드는 다향성이 적요ㅕㅇ되어
        * 동적바인딩이 가능
        *
        * 추상 클래스를 상속받아 구현할 때는 extends 키워드를 사용하며
        * 자바에서는 extends로 클래스를 상속받을 시 하나의 부모 클래스만 가질수 있다
        *
        * 추상 메소드란?
        * 메소드의 선언부만 있고 구현부가 없는 메소드를 추상 메소드라고 한다
        * 추상 메소드의 경우 반드시 abstract 카워드를 메소드 헤더에 작성해야 한다
        * */
        SmartPhone smart = new SmartPhone();

        System.out.println(smart instanceof SmartPhone);
        System.out.println(smart instanceof Product);

        Product pro = new SmartPhone();
        pro.abstractMethod();

        /*
        * 추상 클래스를 왜쓰나
        * 추상 클래스의 추상 메소드는 오버라이딩에 대한 강제성이 부여됨
        * 따라서 여러 클래스들을 그룹화 하여
        * 필수 기능을 정의하여 강제성을 부여해 개발 시 일관된 인터페이스를 제공할 수 있다.
        *
        * 하지만 다른 클래스를 상속받고 있는 클래스를 작성할 시에는
        * 추상 클래스를 추가로 상속받을 수 없다
        * 그래서 추상클래스보다 더 강제성이 강한 인터페이스라는 메커니즘을 제공한다
        * */
    }
}
